{{- if not .Values.global.production }}
{{- if .Values.global.ingress_controller_enable }}
# apiVersion: v1
# kind: Namespace
# metadata:
#   name: ingress-nginx
# ---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: nginx-ingress-serviceaccount
  # namespace: ingress-nginx

---
{{- if not .Values.global.namespaced }}
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: nginx-ingress-clusterrole
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - nodes
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - nodes
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
        - events
    verbs:
        - create
        - patch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
    verbs:
      - update
{{- end }}
---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: nginx-ingress-role
  # namespace: ingress-nginx
rules:
  - apiGroups:
      - ""
    resources:
      - configmaps
      - pods
      - secrets
      - namespaces
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
    resourceNames:
      # Defaults to "<election-id>-<ingress-class>"
      # Here: "<ingress-controller-leader>-<nginx>"
      # This has to be adapted if you change either parameter
      # when launching the nginx-ingress-controller.
      - "ingress-controller-leader-nginx"
    verbs:
      - get
      - update
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - create
  - apiGroups:
      - ""
    resources:
      - endpoints
    verbs:
      - get
  - apiGroups:
      - ""
    resources:
      - configmaps
      - endpoints
      - pods
      - secrets
    verbs:
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - "extensions"
    resources:
      - ingresses
    verbs:
      - get
      - list
      - watch
  # - apiGroups:
  #     - ""
  #   resources:
  #       - events
  #   verbs:
  #       - create
  #       - patch
  # - apiGroups:
  #     - "extensions"
  #   resources:
  #     - ingresses/status
  #   verbs:
  #     - update
---

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: RoleBinding
metadata:
  name: nginx-ingress-role-nisa-binding
  # namespace: ingress-nginx
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: nginx-ingress-role
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    # namespace: ingress-nginx

---
{{- if not .Values.global.namespaced }}
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: nginx-ingress-clusterrole-nisa-binding
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: nginx-ingress-clusterrole
subjects:
  - kind: ServiceAccount
    name: nginx-ingress-serviceaccount
    namespace: {{ .Release.Namespace }}
{{- end }}
---

# This is the backend service
apiVersion: v1
kind: Service
metadata:
  name: nginx-ingress-svc
  # namespace: ingress-nginx
  annotations:
    service.beta.kubernetes.io/external-traffic: OnlyLocal
  labels:
    app: nginx-ingress-svc
spec:
  ports:
{{- if not (eq .Values.global.k8senv "openshift") }}
  - port: 80
    name: http
    targetPort: 80
  - port: 443
    name: https
    targetPort: 443
{{- else }}        
  - port: 8080
    name: http
    targetPort: 8080
  - port: 9443
    name: https
    targetPort: 9443
{{- end }}  
  # externalIPs:
  # - 10.32.10.6
  selector:
    # Selects nginx-ingress-controller pods
    k8s-app: nginx-ingress-controller

---
apiVersion: apps/v1
{{- if eq .Values.global.k8senv "openshift" }}
kind: Deployment
{{- else }}
kind: DaemonSet
{{- end }}                                    
metadata:
  name: nginx-ingress-controller
  # namespace: ingress-nginx
  labels:
    k8s-app: nginx-ingress-controller
spec:
{{- if eq .Values.global.k8senv "openshift" }}
  replicas: 1
{{- end }}
  selector:
    matchLabels:
      k8s-app: nginx-ingress-controller                                   
  template:
    metadata:
      labels:
        k8s-app: nginx-ingress-controller
    spec:
      # hostNetwork makes it possible to use ipv6 and to preserve the source IP correctly regardless of docker configuration
      # however, it is not a hard dependency of the nginx-ingress-controller itself and it may cause issues if port 10254 already is taken on the host
      # that said, since hostPort is broken on CNI (https://github.com/kubernetes/kubernetes/issues/31307) we have to use hostNetwork where CNI is used
      # like with kubeadm
      # hostNetwork: true
      terminationGracePeriodSeconds: 60
      serviceAccountName: nginx-ingress-serviceaccount
      volumes:
        - name: configs
          emptyDir: {}
        - name: data
          emptyDir: {}
      initContainers:
      - name: init-myservice
        image: {{ .Values.global.registry }}busybox:1.28.0-glibc
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
        command: ['sh']
        args:
          - -c
          - |
            mkdir -p /etc/ingress-controller/auth
            mkdir -p /etc/ingress-controller/ssl
            mkdir -p /ingress-controller/ssl
            chmod -R 777 /etc/ingress-controller/auth
            chmod -R 777 /etc/ingress-controller/ssl
            chmod -R 777 /ingress-controller/ssl
        volumeMounts:
          - name: configs
            mountPath: /etc/ingress-controller
          - name: data
            mountPath: /ingress-controller
      containers:
      - image: {{ .Values.global.registry }}quay.io/kubernetes-ingress-controller/nginx-ingress-controller:0.9.0
        resources:
          limits:
            cpu: 200m
            memory: 256Mi
        name: nginx-ingress-controller
        readinessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
        livenessProbe:
          httpGet:
            path: /healthz
            port: 10254
            scheme: HTTP
          initialDelaySeconds: 10
          timeoutSeconds: 1
        volumeMounts:
          - name: configs
            mountPath: /etc/ingress-controller
          - name: data
            mountPath: /ingress-controller
        ports:
        - containerPort: 10254
{{- if not (eq .Values.global.k8senv "openshift") }}
        - containerPort: 80
          hostPort: 80
{{- else }}        
        - containerPort: 8080
{{- end }}
{{- if not (eq .Values.global.k8senv "openshift") }}
        - containerPort: 443
          hostPort: 443
{{- else }}        
        - containerPort: 9443
{{- end }}
        env:
          - name: POD_NAME
            valueFrom:
              fieldRef:
                fieldPath: metadata.name
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
        # command: ['sh', '-c', 'sleep 4000']
        args:
        - /nginx-ingress-controller
        - --default-backend-service=$(POD_NAMESPACE)/default-http-backend
{{- if eq .Values.global.k8senv "openshift" }}
        - --http-port=8080
        - --https-port=9443
{{- end }}        
{{- if .Values.global.namespaced }}
        - --watch-namespace=$(POD_NAMESPACE)
        - --force-namespace-isolation=true
{{- end }}        
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: default-http-backend
  # namespace: ingress-nginx
  labels:
    app: default-http-backend
spec:
  replicas: 1
  selector:
    matchLabels:
      app: default-http-backend
  template:
    metadata:
      labels:
        app: default-http-backend
    spec:
      terminationGracePeriodSeconds: 60
      containers:
      - name: default-http-backend
        # Any image is permissable as long as:
        # 1. It serves a 404 page at /
        # 2. It serves 200 on a /healthz endpoint
        image: gcr.io/google_containers/defaultbackend:1.4
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8080
            scheme: HTTP
          initialDelaySeconds: 30
          timeoutSeconds: 5
        ports:
        - containerPort: 8080
        resources:
          limits:
            cpu: 10m
            memory: 20Mi
          requests:
            cpu: 10m
            memory: 20Mi
---

apiVersion: v1
kind: Service
metadata:
  # namespace: ingress-nginx
  name: default-http-backend
  labels:
    app: default-http-backend
spec:
  ports:
  - port: 80
    targetPort: 8080
  selector:
    app: default-http-backend
{{- end }}
{{- end }}
