apiVersion: apps/v1
kind: Deployment
metadata:
  name: datasources-service
  labels:
    app: datasources-service
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    group: {{ .Values.labels.group.value }}
    core: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: datasources-service
      release: datasources-service
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps/datasources-service-cm.yaml") . | sha256sum }}
      labels:
        app: datasources-service
        release: datasources-service
        group: {{ .Values.labels.group.value }}
    spec:
{{- if or .Values.global.registry_password .Values.global.image_pull_secret.use_existing }}
      imagePullSecrets:
        - name: {{ .Values.global.image_pull_secret.name }}
{{- end }}     
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
        - name: uploads
          emptyDir: {}
        - name: temp
          emptyDir: {}
{{- if eq .Values.env.default_storage "fs" }}
        - name: storage-volume
          persistentVolumeClaim:
            claimName: hkube-storage-pvc
{{- end }}                                    
      containers:
        - name: datasources-service
          image: "{{ .Values.global.registry }}{{ .Values.datasources_service.image.repository }}:{{ .Values.datasources_service.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- if .Values.global.resources_enable }}          
          resources:
{{ toYaml .Values.datasources_service.resources | indent 12 }}
{{- else }}
          resources: {}
{{- end }}
          volumeMounts:
            - name: uploads
              mountPath: /hkube/datasources-service/uploads
            - name: temp
              mountPath: /hkube/datasources-service/temp
{{- if eq .Values.env.default_storage "fs" }}
            - name: storage-volume
              mountPath: {{ .Values.global.storage.fs.base_directory | quote}}
{{- end }}                                    
          ports:
            - containerPort: {{ .Values.datasources_service.env.metric_port }}
              protocol: TCP
            - containerPort: {{ .Values.datasources_service.env.port }}
              protocol: TCP
          env:
            - name: METRICS_PORT
              valueFrom:
                configMapKeyRef:
                  name: datasources-service-configmap
                  key: METRICS_PORT
            - name: DATASET_SERVICE_REST_PORT
              valueFrom:
                configMapKeyRef:
                  name: datasources-service-configmap
                  key: PORT
            - name: NODE_ENV
              valueFrom:
                configMapKeyRef:
                  name: datasources-service-configmap
                  key: NODE_ENV
            - name: BASE_URL_PATH
              valueFrom:
                configMapKeyRef:
                  name: datasources-service-configmap
                  key: BASE_URL_PATH
{{- if eq .Values.env.default_storage "fs" }}
            - name: BASE_FS_ADAPTER_DIRECTORY
              valueFrom:
                configMapKeyRef:
                  name: datasources-service-configmap
                  key: BASE_FS_ADAPTER_DIRECTORY
{{- else if eq .Values.env.default_storage "s3" }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: s3-secret
                  key: awsKey
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: s3-secret
                  key: awsSecret
            - name: S3_ENDPOINT_URL
              valueFrom:
                secretKeyRef:
                  name: s3-secret
                  key: awsEndpointUrl
{{- end }}                                    
            - name: DEFAULT_STORAGE
              valueFrom:
                configMapKeyRef:
                  name: datasources-service-configmap
                  key: DEFAULT_STORAGE
            - name: STORAGE_ENCODING
              valueFrom:
                configMapKeyRef:
                  name: datasources-service-configmap
                  key: STORAGE_ENCODING                  
            - name: CLUSTER_NAME
              valueFrom:
                configMapKeyRef:
                  name: datasources-service-configmap
                  key: CLUSTER_NAME
{{- if .Values.global.isPrivileged }}            
            - name: JAEGER_AGENT_SERVICE_HOST
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
{{- else if .Values.jaeger.external_agent_address }}
            - name: JAEGER_AGENT_SERVICE_HOST
              value: .Values.jaeger.external_agent_address
{{- end }}    
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: INGRESS_PREFIX
              valueFrom:
                configMapKeyRef:
                  name: datasources-service-configmap
                  key: INGRESS_PREFIX
{{- if .Values.mongodb.enable }}
            - name: MONGODB_SERVICE_USER_NAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongodb-username
            - name: MONGODB_SERVICE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongodb-password
            - name: MONGODB_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongodb-database
{{- end }}