apiVersion: apps/v1
kind: Deployment
metadata:
  name: gc-service
  labels:
    app: gc-service
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    group: {{ .Values.labels.group.value }}
    core: "true"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: gc-service
      release: gc-service
  template:
    metadata:
      annotations:
        checksum/config: {{ include (print $.Template.BasePath "/configmaps/gc-service-cm.yaml") . | sha256sum }}
      labels:
        app: gc-service
        release: gc-service
        group: {{ .Values.labels.group.value }}
    spec:
{{- if or .Values.global.registry_password .Values.global.image_pull_secret.use_existing }}
      imagePullSecrets:
        - name: {{ .Values.global.image_pull_secret.name }}
{{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
{{ include "hkube.fluent_bit.volume" . | indent 8 }}
{{- if eq .Values.env.default_storage "fs" }}
        - name: storage-volume
          persistentVolumeClaim:
            claimName: hkube-storage-pvc
{{- end }}
      serviceAccountName: gc-service
      containers:
        - name: gc-service
          image: "{{ .Values.global.registry }}{{ .Values.gc_service.image.repository }}:{{ .Values.gc_service.image.tag }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
{{- if .Values.gc_service.healthcheck.enabled }}
          livenessProbe:
            httpGet:
              path: {{ .Values.gc_service.healthcheck.path }}
              port: {{ .Values.gc_service.healthcheck.port }}
            initialDelaySeconds: {{ .Values.gc_service.healthcheck.initialDelaySeconds }}
            periodSeconds: {{ .Values.gc_service.healthcheck.periodSeconds }}
            timeoutSeconds: {{ .Values.gc_service.healthcheck.timeoutSeconds }}
            failureThreshold: {{ .Values.gc_service.healthcheck.failureThreshold }}
{{- end }}
{{- if or .Values.global.resources_enable .Values.gc_service.resources_enable }}
          resources:
{{ toYaml .Values.gc_service.resources | indent 12 }}
{{- else }}
          resources: {}
{{- end }}
          volumeMounts:
{{ include "hkube.fluent_bit.volumemount" . | indent 12 }}
{{- if eq .Values.env.default_storage "fs" }}
            - name: storage-volume
              mountPath: {{ .Values.global.storage.fs.base_directory | quote}}
{{- end }}
          ports:
            - containerPort: {{ .Values.gc_service.env.rest_port }}
              protocol: TCP
          envFrom:
            - configMapRef:
                name: gc-service-configmap
          env:
{{ include "hkube.fluent_bit.environment" . | indent 12 }}
            - name: NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
{{- if eq .Values.env.default_storage "s3" }}
            - name: AWS_ACCESS_KEY_ID
              valueFrom:
                secretKeyRef:
                  name: s3-secret
                  key: awsKey
            - name: AWS_SECRET_ACCESS_KEY
              valueFrom:
                secretKeyRef:
                  name: s3-secret
                  key: awsSecret
            - name: S3_ENDPOINT_URL
              valueFrom:
                secretKeyRef:
                  name: s3-secret
                  key: awsEndpointUrl
{{- end }}
{{- if .Values.mongodb.enable }}
            - name: MONGODB_SERVICE_USER_NAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongodb-username
            - name: MONGODB_SERVICE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongodb-password
            - name: MONGODB_DB_NAME
              valueFrom:
                secretKeyRef:
                  name: mongodb-secret
                  key: mongodb-database
{{- end }}
{{ include "hkube.fluent_bit.sidecar" . | indent 8 }}
